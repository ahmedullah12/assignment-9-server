generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  profileImage  String?
  contactNumber String
  role          UserRole
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  shop       Shop?
  followShop FollowShop[]
  reviews    Review[]
  Payment    Payment[]

  @@map("users")
}

model Shop {
  id          String     @id @default(uuid())
  name        String     @unique
  vendorId    String     @unique
  logoUrl     String
  description String
  status      ShopStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  vendor     User         @relation(fields: [vendorId], references: [id])
  products   Product[]
  followShop FollowShop[]

  @@map("shops")
}

model FollowShop {
  userId String
  shopId String

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@id([userId, shopId])
  @@map("follow_shops")
}

model Category {
  id              String            @id @default(uuid())
  name            String            @unique
  productCategory ProductCategory[]

  @@map("categories")
}

model Product {
  id             String   @id @default(uuid())
  name           String
  price          Float
  inventoryCount Int      @default(0)
  isFlashSale    Boolean  @default(false)
  discount       Float?
  flashSalePrice Float?
  description    String
  images         String[]
  shopId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shop            Shop              @relation(fields: [shopId], references: [id])
  productCategory ProductCategory[]
  reviews         Review[]
  paymentProduct  PaymentProduct[]

  @@map("products")
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(1) // e.g., 1-5 scale
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Payment {
  id              String        @id @default(uuid())
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String
  userId          String
  transactionId   String
  paymentDate     DateTime      @default(now())
  totalPrice      Float
  status          PaymentStatus?

  user     User             @relation(fields: [userId], references: [id])
  products PaymentProduct[]

  @@map("payments")
}

model PaymentProduct {
  id        String  @id @default(uuid())
  paymentId String
  productId String
  quantity  Int
  price     Float
  payment   Payment @relation(fields: [paymentId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("payment_products")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ShopStatus {
  ACTIVE
  BLACKLISTED
  DELETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
